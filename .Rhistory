rm(list=ls())
load(file="football_data.Rdata")
y  <- factor(dtset[,1], labels=c("W","L","D"))
Xf <- dtset[,2:ncol(dtset)]
rm(list=ls())
load(file="football_data.Rdata")
y  <- factor(dtset[,1], labels=c("W","L","D"))
Xf <- dtset[,2:ncol(dtset)]
#Displaying the initial data
rm(list=ls())
#The first coloumn is for win loss and draw
load(file="football_data.Rdata")
str(dtset)
y  <- factor(dtset[,1], labels=c("W","L","D"))
# Initial covariate, all 482
Xi <- dtset[,2:ncol(dtset)]
#The first coloumn is for win loss and draw
load(file="football_data.Rdata")
str(dtset)
# Storing result
y  <- factor(dtset[,1], labels=c("W","L","D"))
# Initial covariate, all 482
Xi <- dtset[,2:ncol(dtset)]
load(file="football_data.Rdata")
str(dtset)
#The first coloumn is for win loss and draw
load(file="football_data.Rdata")
str(dtset)
# Storing result
y  <- factor(dtset[,1], labels=c("W","L","D"))
# Initial covariate, all 482
Xi <- dtset[,2:ncol(dtset)]
#Displaying the initial data
rm(list=ls())
#The first coloumn is for win loss and draw
load(file="football_data.Rdata")
str(dtset)
# Storing result
y  <- factor(dtset[,1], labels=c("W","L","D"))
# Initial covariate, all 482
Xi <- dtset[,2:ncol(dtset)]
load(file="football_data.Rdata")
load(file="football_data.Rdata")
load(file="football_data.Rdata")
load(file="football_data.Rdata")
str(dtset)
football_data <- read.table("C:/Users/Real/Downloads/Data-for-DMAR-book (1)/Data-for-DMAR-book/Chapter14/football_data.Rdata", quote="\"")
View(football_data)
load(file="football_data.Rdata")
str(dtset)
rm(list=ls())
load(file="football_data.Rdata")
football_data <- read.table("C:/Users/Real/Downloads/Data-for-DMAR-book (1)/Data-for-DMAR-book/Chapter14/football_data.Rdata", quote="\"")
View(football_data)
rm(list=ls())
load(file="football_data.Rdata")
#Displaying the initial data
rm(list=ls())
#The first coloumn is for win loss and draw
load(file="football_data.Rdata")
str(dtset)
load("C:/Users/Real/Downloads/Data-for-DMAR-book (1)/Data-for-DMAR-book/Chapter14/football_data.Rdata")
setwd("C:/Users/Real/Downloads/Data-for-DMAR-book (1)/Data-for-DMAR-book/Chapter14")
load(file="football_data.Rdata")
str(dtset)
setwd("C:/Users/Real/Downloads/Project")
#Displaying the initial data
rm(list=ls())
#The first coloumn is for win loss and draw
load(file="football_data.Rdata")
str(dtset)
# Storing result
y  <- factor(dtset[,1], labels=c("W","L","D"))
# Initial covariate, all 482
Xi <- dtset[,2:ncol(dtset)]
PerFreq <- round(prop.table(AbsFreq)*100,1)
cbind(AbsFreq,PerFreq)
# Initial analysis on data
library(ggplot2)
Freq <- data.frame(PerFreq)
plot1 <- ggplot(Freq,aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+
scale_fill_manual(values=c("green","yellow","red"))+
scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")+
theme(text=element_text(size = 24))
ggsave(filename="plot1.pdf", plot=plot1)
library(Hmisc)
describe(Xi)
x.name <- "O_OCCAS_C"
x <- Xi[,names(Xi) %in% x.name]
pf <- prop.table(table(x,y),1)[,c(1,3,2)]
dtst <- data.frame(PctFreq=c(t(pf)),
x=rep(as.numeric(rownames(pf)),each=ncol(pf)),
Outcome=ordered(rep(1:3,nrow(pf)), labels=colnames(pf)))
plot2 <- ggplot(dtst, aes(x=x, y=PctFreq, group=Outcome, fill=Outcome)) +
geom_area(position="fill") +  scale_x_continuous(x.name) +
scale_y_continuous("Percentage frequency") +
scale_fill_manual(values = c("green","yellow","red"))+
theme(text=element_text(size = 24))
ggsave(filename="plot2.pdf", plot=plot2)
#Displaying the initial data
rm(list=ls())
#The first coloumn is for win loss and draw
load(file="football_data.Rdata")
str(dtset)
# Storing result
y  <- factor(dtset[,1], labels=c("W","L","D"))
# Initial covariate, all 482
Xi <- dtset[,2:ncol(dtset)]
PerFreq <- round(prop.table(AbsFreq)*100,1)
cbind(AbsFreq,PerFreq)
#Displaying the initial data
rm(list=ls())
#The first coloumn is for win loss and draw
load(file="football_data.Rdata")
str(dtset)
# Storing result
y  <- factor(dtset[,1], labels=c("W","L","D"))
# Initial covariate, all 482
Xi <- dtset[,2:ncol(dtset)]
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq)*100,1)
cbind(AbsFreq,PerFreq)
#Displaying the initial data
rm(list=ls())
#The first coloumn is for win loss and draw
load(file="football_data.Rdata")
str(dtset)
# Storing result
y  <- factor(dtset[,1], labels=c("W","L","D"))
# Initial covariate, all 482
Xi <- dtset[,2:ncol(dtset)]
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq)*100,1)
cbind(AbsFreq,PerFreq)
# Initial analysis on data
library(ggplot2)
Freq <- data.frame(PerFreq)
plot1 <- ggplot(Freq,aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+
scale_fill_manual(values=c("green","yellow","red"))+
scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")+
theme(text=element_text(size = 24))
ggsave(filename="plot1.pdf", plot=plot1)
library(Hmisc)
describe(Xi)
x.name <- "O_OCCAS_C"
x <- Xi[,names(Xi) %in% x.name]
pf <- prop.table(table(x,y),1)[,c(1,3,2)]
dtst <- data.frame(PctFreq=c(t(pf)),
x=rep(as.numeric(rownames(pf)),each=ncol(pf)),
Outcome=ordered(rep(1:3,nrow(pf)), labels=colnames(pf)))
plot2 <- ggplot(dtst, aes(x=x, y=PctFreq, group=Outcome, fill=Outcome)) +
geom_area(position="fill") +  scale_x_continuous(x.name) +
scale_y_continuous("Percentage frequency") +
scale_fill_manual(values = c("green","yellow","red"))+
theme(text=element_text(size = 24))
ggsave(filename="plot2.pdf", plot=plot2)
#Displaying the initial data
rm(list=ls())
#The first coloumn is for win loss and draw
load(file="football_data.Rdata")
str(dtset)
# Storing result
y  <- factor(dtset[,1], labels=c("W","L","D"))
# Initial covariate, all 482
Xi <- dtset[,2:ncol(dtset)]
AbsFreq <- table(y)
PerFreq <- round(prop.table(AbsFreq)*100,1)
cbind(AbsFreq,PerFreq)
# Initial analysis on data
library(ggplot2)
Freq <- data.frame(PerFreq)
plot1 <- ggplot(Freq,aes(x="", fill=y, weight=Freq))+ geom_bar(width = 1)+
scale_fill_manual(values=c("green","yellow","red"))+
scale_y_continuous("Percentage frequency")+scale_x_discrete(name="")+
theme(text=element_text(size = 24))
ggsave(filename="plot1.pdf", plot=plot1)
library(Hmisc)
describe(Xi)
x.name <- "O_OCCAS_C"
x <- Xi[,names(Xi) %in% x.name]
pf <- prop.table(table(x,y),1)[,c(1,3,2)]
dtst <- data.frame(PctFreq=c(t(pf)),
x=rep(as.numeric(rownames(pf)),each=ncol(pf)),
Outcome=ordered(rep(1:3,nrow(pf)), labels=colnames(pf)))
plot2 <- ggplot(dtst, aes(x=x, y=PctFreq, group=Outcome, fill=Outcome)) +
geom_area(position="fill") +  scale_x_continuous(x.name) +
scale_y_continuous("Percentage frequency") +
scale_fill_manual(values = c("green","yellow","red"))+
theme(text=element_text(size = 24))
ggsave(filename="plot2.pdf", plot=plot2)
####################################################
################DATA PREPROCESSING##################
####################################################
rm(list=ls())
load(file="football_data.Rdata")
y  <- factor(dtset[,1], labels=c("W","L","D"))
Xf <- dtset[,2:ncol(dtset)]
# VARIABLE IMPORTANCE EVALUATION
Zf <- Xf[sample(nrow(Xf)),]
dtset.pseudo <- data.frame(cbind(Xf, Zf, y))
library(randomForest)
rf <- randomForest(y ~ ., data=dtset.pseudo, ntree=500)
VIMs <- importance(rf, type=2)
p <- ncol(Xf)
VIMs.unb <- VIMs[1:p,] - VIMs[(p+1):(2*p),]
VIMs.unb <- function(k){
set.seed(k)
Zf <- Xf[sample(nrow(Xf)),]
dtset.pseudo <- data.frame(cbind(Xf,Zf,y))
rf <- randomForest(y ~ ., data=dtset.pseudo, ntree=500)
VIMs <- importance(rf, type=2)
VIMs[1:p,] - VIMs[(p+1):(2*p),]
}
library(snowfall)
sfInit(parallel=TRUE, cpus=6, type="SOCK")
sfLibrary(randomForest)
sfExport("Xf", "y", "p")
VIMs.list <- sfLapply(x=1:10, VIMs.unb)
sfStop()
VIMs <- t(matrix(unlist(VIMs.list),p))
GINI.unb <- apply(VIMs,2,mean)
idx <- order(GINI.unb,decreasing=T)
Xs <- Xf[,idx[1:13]]
Xs
# Plotting important VIM on the graph
dt <- data.frame(id=1:50,
VIM=GINI.unb[idx[1:50]],
grp=c(rep(1,4),rep(2,9),rep(3,50-4-9)),
names=c(names(Xs),rep("",50-13)),
cols= c(rep("red",4),rep("blue",9),rep("gray50",50-4-9)))
plot4 <- ggplot(dt, aes(x=id, y=VIM, label=names, colour=cols))+
geom_point() + scale_colour_discrete(l=60)+ scale_fill_identity() +
geom_text(angle = 45,hjust=-.05, vjust=0, size=4.2)+
scale_y_continuous(name="Gini VIM corrected",limits=c(0,3.05))+
scale_x_continuous(name="")+
theme(legend.position="none",text=element_text(size = 24))
ggsave(filename="plot4.pdf", plot=plot4)
save(Xs,y,file="selected_covariates.RData")
Xc <- Xs
save(Xc,y,file="object_scores.RData")
rm(list=ls())
load(file="object_scores.RData")
library(randomForest)
library(caret)
library(nnet)
library(klaR)
library(doParallel)
library(RSNNS)
library(doParallel)
dtset.ind <- data.frame(Xc, y)
set.seed(987654)
idx <- sample(1:nrow(dtset.ind),80)
learn <- dtset.ind[-idx,]
test  <- dtset.ind[idx,]
describe(test$y)
# RANDOM FOREST (RF)
clus <- parallel::makeCluster(spec=6, type='PSOCK')
registerDoParallel(clus)
ctrl.train <- trainControl(method='repeatedcv',number=10,repeats=15)
fit.rf <- train(y ~ ., data=learn, method='rf', metric='Accuracy',
tuneGrid=expand.grid(.mtry=1:6),trControl=ctrl.train,
ntree=1000)
stopCluster(clus)
print(fit.rf)
y.rf <- predict(fit.rf$finalModel, newdata=test[,1:13],type='class')
cbind(y.rf, test$y)
describe(y.rf)
CM.rf <- caret::confusionMatrix(y.rf, test$y)
CM.rf
# K-NEAREST NEIGHBOR ALGORITHM (KNN)
prc_test_pred <- knn(train, test,cl = y, k=10)
clus <- parallel::makeCluster(spec=6, type='PSOCK')
registerDoParallel(clus)
fit.knn <- caret::train(y~., data=learn, method='knn',
tuneGrid=expand.grid(.k=5:100),
metric='Accuracy', trControl=ctrl.train)
stopCluster(clus)
yhat.knn<-predict(fit.knn$finalModel,newdata=test[,1:13],type="class")
describe(yhat.knn)
CM.knn <- caret::confusionMatrix(yhat.knn, test$y)
CM.knn
## NAÏVE BAYESIAN CLASSIFICATION (NBAYES)
library(klaR)
fit.NB <- NaiveBayes(y~., data=learn)
pred.NB <-  predict(fit.NB, newdata=test)
probs.NB <- pred.NB$posterior
y.nb <- pred.NB$class
CM.nb <- caret::confusionMatrix(y.nb, test$y)
y.nb
CM.nb
describe(y.nb)
# CLASSIFICATION NEURAL NETWORK (NNET)
clus <- parallel::makeCluster(spec=6, type='PSOCK')
registerDoParallel(clus)
fit.nnet <- caret::train(y~., data=learn, method='mlp', metric='Accuracy',
tuneGrid=expand.grid(.size=1:15),learnFunc="SCG",
trControl=ctrl.train)
stopCluster(clus)
summary(fit.nnet$finalModel)
probs.nnet <- predict(fit.nnet$finalModel, newdata=test[,1:6])
head(probs.nnet)
y.nnet <- apply(probs.nnet,1,which.max)
y.nnet <- factor(y.nnet,levels=1:3,labels=levels(test$y))
